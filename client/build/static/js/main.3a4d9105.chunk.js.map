{"version":3,"sources":["logo.svg","Downloads.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Downloads","to","activeClassName","exact","path","App","useState","count","setCount","className","src","logo","alt","href","target","rel","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,+MCsC5BC,MA9Bf,WACI,OACI,6BACI,kCACA,oCACA,kBAAC,IAAD,KACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAASC,GAAG,mBAAmBC,gBAAgB,YAAYC,OAAK,GAAhE,WAEJ,4BACI,kBAAC,IAAD,CAASF,GAAG,mBAAmBC,gBAAgB,YAAYC,OAAK,GAAhE,aAKZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOA,OAAK,EAACC,KAAK,oBACd,uCAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,oBACd,2CCsHTC,MAzIf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,KA0Bb,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKC,UAAU,cACb,4BACE,4BACE,kBAAC,IAAD,CAASR,GAAG,IAAIC,gBAAgB,YAAYC,OAAK,GAAjD,SAEF,4BACE,kBAAC,IAAD,CAASF,GAAG,SAASC,gBAAgB,YAAYC,OAAK,GAAtD,UAEF,4BACE,kBAAC,IAAD,CAASF,GAAG,aAAaC,gBAAgB,YAAYC,OAAK,GAA1D,gBAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAID,OAAK,GACnB,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eASA,2CAAiBR,EAAjB,WACA,4BAAQS,QAAS,kBAAMR,EAASD,EAAQ,KAAxC,YAEA,wBAAIE,UAAU,YAWpB,kBAAC,IAAD,CAAOL,KAAK,SAASD,OAAK,GACxB,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,wCAKN,kBAAC,IAAD,CAAOL,KAAK,aAAaD,OAAK,GAC5B,kBAAC,IAAD,KACE,6BACE,yBAAKM,UAAU,gBACb,4BACE,4BACE,kBAAC,IAAD,CAASR,GAAG,aAAaC,gBAAgB,YAAYC,OAAK,GAA1D,aAEF,4BACE,kBAAC,IAAD,CAASF,GAAG,kBAAkBC,gBAAgB,YAAYC,OAAK,GAA/D,WAEF,4BACE,kBAAC,IAAD,CAASF,GAAG,iBAAiBC,gBAAgB,YAAYC,OAAK,GAA9D,UAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aAAaD,OAAK,GAC5B,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,0CAGJ,8BACE,0BAAMA,UAAU,OAAhB,eADF,IAC2C,0BAAMA,UAAU,YAAhB,qBAE3C,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOL,KAAK,kBAAkBD,OAAK,GACjC,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAKN,kBAAC,IAAD,CAAOL,KAAK,iBAAiBD,OAAK,GAChC,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,sDC1HJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a4d9105.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect } from 'react';\r\nimport {BrowserRouter as Router,\r\n    NavLink,\r\n    Route,\r\n    Switch } from 'react-router-dom';\r\nimport logo from './logo.svg';\r\nimport './scss/app.scss';\r\n\r\nfunction Downloads() {\r\n    return (\r\n        <div>\r\n            <h1>Hi</h1>\r\n            <h2>HiHi</h2>\r\n            <Router>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink to='/downloads/file5' activeClassName=\"activeNav\" exact>File 5</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/downloads/file9' activeClassName=\"activeNav\" exact>File 9</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <Switch>\r\n                    <Route exact path='/downloads/file5'>\r\n                        <h1>File 5</h1>\r\n                    </Route>\r\n                    <Route exact path='/downloads/file9'>\r\n                        <h1>File 9</h1>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Downloads;","import React, { useState, useEffect } from 'react';\r\nimport {BrowserRouter as Router,\r\n  NavLink,\r\n  Route,\r\n  Switch } from 'react-router-dom';\r\n/* import projectService from './services/projectService'; */\r\nimport logo from './logo.svg';\r\nimport './scss/app.scss';\r\n\r\nimport Downloads from './Downloads';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n  /*\r\n  const [projects, setprojects] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!projects) {\r\n      getProjects();\r\n    }\r\n  });\r\n\r\n  const getProjects = async() => {\r\n    let res = await projectService.getAll();\r\n    setprojects(res);\r\n  }\r\n\r\n  const renderProject = project => {\r\n    return (\r\n      <li key={project.id} className=\"list__item project\">\r\n        <h3 className=\"product__name\">{project.name}</h3>\r\n        <p className=\"product__description\">{project.descript}</p>\r\n        <a className=\"App-link\" href={project.github}>Link</a>\r\n      </li>\r\n    );\r\n  };*/\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav className=\"PrimaryNav\">\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/\" activeClassName=\"activeNav\" exact>Home</NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/about\" activeClassName=\"activeNav\" exact>About</NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/downloads\" activeClassName=\"activeNav\" exact>Downloads</NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path='/' exact>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                  Edit <code>src/App.js</code> and save to reload.\r\n                </p>\r\n                <a\r\n                  className=\"App-link\"\r\n                  href=\"https://reactjs.org\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Learn React\r\n                </a>\r\n\r\n                <h1>You clicked {count} times!</h1>\r\n                <button onClick={() => setCount(count + 1)}>Click me</button>\r\n\r\n                <ul className=\"list\">\r\n                  { /*(projects && projects.length > 0) ? (\r\n                    projects.map(project => renderProject(project))\r\n                  ) : (\r\n                    <p>No project found</p>\r\n                  ) */}\r\n                </ul>\r\n              </header>\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path='/about' exact>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                <h1>About</h1>  \r\n              </header>\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path='/downloads' exact>\r\n            <Router>\r\n              <div>\r\n                <nav className=\"SecondaryNav\">\r\n                  <ul>\r\n                    <li>\r\n                      <NavLink to='/downloads' activeClassName=\"activeNav\" exact>Overview</NavLink>\r\n                    </li>\r\n                    <li>\r\n                      <NavLink to='/downloads/file' activeClassName=\"activeNav\" exact>File 1</NavLink>\r\n                    </li>\r\n                    <li>\r\n                      <NavLink to='/downloads/zip' activeClassName=\"activeNav\" exact>Zip</NavLink>\r\n                    </li>\r\n                  </ul>\r\n                </nav>\r\n\r\n                <Switch>\r\n                  <Route path='/downloads' exact>\r\n                    <div className=\"App\">\r\n                      <header className=\"App-header\">\r\n                        <h1>Overview</h1>\r\n                      </header>\r\n                    </div>\r\n                    <code>\r\n                      <span className=\"npm\">npm install</span> <span className=\"npm-pack\">react-router-dom</span>\r\n                    </code>\r\n                    <Downloads />\r\n                  </Route>\r\n\r\n                  <Route path='/downloads/file' exact>\r\n                    <div className=\"App\">\r\n                      <header className=\"App-header\">\r\n                        <h1>File 1</h1>\r\n                      </header>\r\n                    </div>\r\n                  </Route>\r\n\r\n                  <Route path='/downloads/zip' exact>\r\n                    <div className=\"App\">\r\n                      <header className=\"App-header\">\r\n                        <h1>Zip Archive</h1>\r\n                      </header>\r\n                    </div>\r\n                  </Route>\r\n                </Switch>\r\n              </div>\r\n            </Router>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}